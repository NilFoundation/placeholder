syntax = "proto3";

package executionproofs;
option go_package = "/proto";

import "verbose_mpt.proto";

// Uint256 represents a 256-bit unsigned integer as a sequence of uint64 parts
message Uint256 {
    repeated uint64 word_parts = 1;  // 4 uint64 parts composing the 256-bit number
}

// Address represents an Ethereum address
message Address {
    bytes address_bytes = 1;  // 20-byte address
}

// StackOp represents a single stack operation ()
message StackOp {
    bool is_read = 1;
    int32 index = 2;  // Index in the stack
    Uint256 value = 3;
    uint64 pc = 4;
    uint64 txn_id = 5;  // Number of transaction within a block
    uint64 rw_idx = 6;  // shared between all ops counter
}

// MemoryOp represents a single memory operation (byte)
message MemoryOp {
    bool is_read = 1;
    int32 index = 2;  // Index in memory
    bytes value = 3;  // Single byte value
    uint64 pc = 4;
    uint64 txn_id = 5;  // Number of transaction within a block
    uint64 rw_idx = 6;  // shared between all ops counter
}

// StorageOp represents a single storage operation
message StorageOp {
    bool is_read = 1;
    // HEX of hash, bytes would be more space-efficient, but less readable
    string key = 2;
    Uint256 value = 3;  // Single byte value
    Uint256 prev_value = 4;  // Value before storage operation
    uint64 pc = 5;
    uint64 txn_id = 6;  // Number of transaction within a block
    uint64 rw_idx = 7;  // shared between all ops counter
    Address address = 8;  // Contract address
}

// ExpOp represents an exponent operation
message ExpOp {
    Uint256 base = 1;
    Uint256 exponent = 2;
    Uint256 result = 3;
    uint64 pc = 4;         // Program counter
    uint64 txn_id = 5;     // Number of transaction within a block
}

// StorageTrieUpdateTrace represents a trace of storage slot change.
message StorageTrieUpdateTrace {
    // HEX of hashes, bytes would be more space-efficient, but less readable
    string key = 1;
    string root_before = 2;
    string root_after = 3;
    Uint256 value_before = 4;
    Uint256 value_after = 5;
    bytes ssz_proof = 6;
    HumanReadableProof proof_before = 7;
    HumanReadableProof proof_after = 8;
}

// ContractTrieUpdateTrace represents a trace of contract trie change.
message ContractTrieUpdateTrace {
    // HEX of hashes, bytes would be more space-efficient, but less readable
    string key = 1;
    string root_before = 2;
    string root_after = 3;
    SmartContract value_before = 4;
    SmartContract value_after = 5;
    bytes ssz_proof = 6;
    HumanReadableProof proof_before = 7;
    HumanReadableProof proof_after = 8;
}

message StorageTrieUpdatesTraces {
    repeated StorageTrieUpdateTrace updates_traces = 1;
}

// MPTTraces contains traces related to an MPT circuit.
message MPTTraces {
    // HEX address to slots changes in address's storage
    map<string, StorageTrieUpdatesTraces> storage_traces_by_account = 1;
    repeated ContractTrieUpdateTrace contract_trie_traces = 2;
    uint64 trace_idx = 3; // some randomly chosen value that should be checked in the proof generator to ensure integrity of the passed traces
    string proto_hash = 4;  // hash of this proto specification for compatibility check
}

// types.SmartContract serialization
message SmartContract {
    string address = 1;
    bool initialized = 2;
    Uint256 balance = 3;
    string token_root = 4;
    string storage_root = 5;
    string code_hash = 6;
    string async_context_root = 7;
    uint64 seqno = 8;
    uint64 ext_seqno = 9;
    uint64 request_id = 10;
}

// StorageEntry is a key-value pair representing a single piece of storage data
message StorageEntry {
    Uint256 key = 1;
    Uint256 value = 2;
}

message ZKEVMState {
    string tx_hash = 1;
    uint64 call_id = 2;
    uint64 pc = 3;
    uint64 gas = 4;
    uint64 rw_idx = 5;
    string bytecode_hash = 6;
    uint64 opcode = 7;
    Uint256 additional_input = 8;
    uint64 stack_size = 9;
    uint64 memory_size = 10;
    bool tx_finish = 11;
    uint64 error_opcode = 12;
    repeated Uint256 stack_slice = 13;
    map<uint64, uint32> memory_slice = 14;
    repeated StorageEntry storage_slice = 15;
}

enum CopyLocation {
    MEMORY = 0;
    BYTECODE = 1;
    CALLDATA = 2;
    LOG = 3;
    KECCAK = 4;
    RETURNDATA = 5;
}

message CopyParticipant {
    CopyLocation location = 1;
    oneof id {
        uint64 call_id = 2;
        string bytecode_hash = 3;
        string keccak_hash = 4;
    }
    uint64 mem_address = 5;
}

message CopyEvent {
    CopyParticipant from = 1;
    CopyParticipant to = 2;
    uint64 rw_idx = 3;
    bytes data = 4;
}


// Traces collected for bytecode circuit
message BytecodeTraces {
    map<string, bytes> contract_bytecodes = 1;
    uint64 trace_idx = 2; // some randomly chosen value that should be checked in the proof generator to ensure integrity of the passed traces
    string proto_hash = 3;  // hash of this proto specification for compatibility check
}

// Traces collected for rw circuit
message RWTraces {
    repeated StackOp stack_ops = 1;
    repeated MemoryOp memory_ops = 2;
    repeated StorageOp storage_ops = 3;
    uint64 trace_idx = 4; // some randomly chosen value that should be checked in the proof generator to ensure integrity of the passed traces
    string proto_hash = 5;  // hash of this proto specification for compatibility check
}

// Traces collected for zkevm circuit
message ZKEVMTraces {
    repeated ZKEVMState zkevm_states = 1;
    uint64 trace_idx = 2; // some randomly chosen value that should be checked in the proof generator to ensure integrity of the passed traces
    string proto_hash = 3;  // hash of this proto specification for compatibility check
}

// Traces collected for bytecode circuit
message CopyTraces {
    repeated CopyEvent copy_events = 1;
    uint64 trace_idx = 2; // some randomly chosen value that should be checked in the proof generator to ensure integrity of the passed traces
    string proto_hash = 3;  // hash of this proto specification for compatibility check
}

message ExpTraces {
    repeated ExpOp exp_ops = 1;
    uint64 trace_idx = 2; // some randomly chosen value that should be checked in the proof generator to ensure integrity of the passed traces
    string proto_hash = 3;  // hash of this proto specification for compatibility check
}
